#!/usr/bin/env python3
import logging as log

import argparse
import ROOT
import os
import pandas as pd
import pdb # python debugger might be helpful (see https://docs.python.org/3/library/pdb.html)

from python.utils import load_input_csv, getFileName, get_ls_for_next_measurement, load_histogram, writeSummaryCSV

ROOT.gROOT.SetBatch(True) # disable root prompts

os.sys.path.append(os.path.expandvars('$CMSSW_BASE/src/ZCounting/'))
from ZUtils.python.utils import to_RootTime


parser = argparse.ArgumentParser()
parser.add_argument("-b", "--beginRun", help="First run to analyze [%(default)s]", type=int, default=272007)
parser.add_argument("-e", "--endRun", help="Analyze stops when comes to this run [%(default)s]", type=int, default=1000000)
parser.add_argument("-i", "--dirDQM", help="Directory to the input root files from the DQM Offline module", required=True)
parser.add_argument("--byLsCSV", help="ByLs csv input generated by brilcalc", default="default")
parser.add_argument("-o", "--dirOut", help="where to store the output files", default="./")
args = parser.parse_args()

log.info("Initialial settings")

dirDQM = args.dirDQM
dirOut = args.dirOut
beginRun = args.beginRun
endRun = args.endRun
byLsCSV = args.byLsCSV # contains the reference luminosity

dirOutCSV = dirOut+"/csvFiles/"  # folder to store the output csv files

secPerLS = 23.3

currentYear = 2022

etaRegion = "I" # define eta region. Currently supported are "B" (Barrel) and "I" (Inclusive)

nBinsMass = 50  # number of bins in histograms to fit
massLo = 66     # lower boundary for fit range
massHi = 116    # upper boundary for fit range

maximumLS = 2500        # maximum luminosity block number that is stored in the DQM histograms
minLSperRun = 20        # only consider runs with at least 20 luminosity blocks
LumiPerMeasurement = 10 # minimum amount of luminosity required to perform one measurement
ptCut = 27              # pT cut on muons, only for labeling

# |eta| cut on muons, only for labeling 
if etaRegion == "B":
    etaCut = 0.9
else:
    etaCut = 2.4            


log.info(f"Load the ByLS csv file {byLsCSV} with information of the reference luminosity")
byLS_data = load_input_csv(byLsCSV)

if not os.path.isdir(dirOut):
    log.info(f"create output directory {dirOut}")
    os.mkdir(dirOut)

dirMacros = os.path.dirname(os.path.realpath(__file__)) + "/calculateDataEfficiency.C"
log.info(f"Load root macros from {dirMacros} ...")
ROOT.gROOT.LoadMacro(dirMacros)
ROOT.set_massRange(massLo, massHi, nBinsMass)
ROOT.set_ptCut(ptCut)
ROOT.set_etaCut(etaCut)
ROOT.set_energy(13.6)

results = []
# loop over all runs to be fit
log.info("Looping over runs ...")
for run, byLS_run in byLS_data.groupby('run'):

    if run < int(args.beginRun) or run >= int(args.endRun):
        continue
    
    fill = byLS_run.drop_duplicates('fill')['fill'].values[0]
    LSlist = byLS_run.query(f'ls <= {maximumLS}')['ls'].values.tolist()
    Lumilist = byLS_run.loc[byLS_run['ls'].isin(LSlist)]['recorded(/pb)'].values.tolist()

    # Consider only runs with a minimum number of LS
    if len(LSlist) <= minLSperRun:
        log.info(f"Skip run {run} since it only has {len(LSlist)} lumisections")
        continue
    
    log.info(f"Now at run {run}")
    fileName = getFileName(dirDQM,run)
    
    log.info(f"Found file `{fileName}`")

    dirOutSub = f"{dirOut}/Run{run}"
    if not os.path.isdir(dirOutSub):
        log.info(f"create output directory {dirOutSub}")
        os.mkdir(dirOutSub)
        
    ROOT.set_output(dirOutSub)

    log.info("Looping over measurements ...")    
    for m, goodLSlist in enumerate(
        get_ls_for_next_measurement(lumisections=LSlist, luminosities=Lumilist, lumiPerMeasurement=LumiPerMeasurement)
    ):
                
        # create datafram byLS for measurement
        byLS_m = byLS_run.loc[byLS_run['ls'].isin(goodLSlist)]
        recLumi = byLS_m['recorded(/pb)'].sum()
        
        ROOT.set_luminosity(recLumi)
        
        log.info(f"Measurement {m} with {recLumi}/pb lumi from {len(goodLSlist)} lumisections")
            
        # get histograms from good lumisections
        def load(name_):
            return load_histogram(name_, fileName, goodLSlist, run=run, 
                MassBin=nBinsMass, MassMin=massLo, MassMax=massHi, 
                # prefix=f"DQMData/Run {run}/ZCounting/Run summary/Histograms/", 
                prefix="", 
                suffix="new")
        
        log.info("Load histograms ...")
        
        h_hlt2 = load(f"h_mass_hlt2")
        h_hlt1 = load(f"h_mass_hlt1")
        
        ROOT.calculateHLTEfficiencyAndYield(h_hlt2, h_hlt1, m, etaRegion, 1, 6, 1, 6)

        
        h_sel_fail = load(f"h_mass_sel_fail")
        
        h_sel_pass = h_hlt2.Clone()
        h_sel_pass.Scale(2)
        h_sel_pass.Add(h_hlt1)
        
        ROOT.calculateDataEfficiency(h_sel_pass, h_sel_fail, m, "SIT", etaRegion, 1, 6, 1, 6)
       
        log.info("Load fit results ...")
        
        def load_from_workspace(type_eff):
            if type_eff == "yield":
                filename_eff = f"{dirOutSub}/workspace_{etaRegion}_{m}.root"
            else:
                filename_eff = f"{dirOutSub}/workspace_{type_eff}_{etaRegion}_{m}.root"
                
            if not os.path.isfile(filename_eff):
                log.warning(f"fit result {filename_eff} does not exist! exit")
                return None
                
            tfile_eff = ROOT.TFile(filename_eff,"READ")
            workspace = tfile_eff.Get("workspace")
            eff = workspace.var("eff").getVal()
                        
            if type_eff != "yield":
                return eff
            else:
                nsig = workspace.var("Nsig").getVal()
                return nsig, eff
                
        
        recoZ, effHLT = load_from_workspace("yield")
        effSIT = load_from_workspace("SIT")
        # effGlo = load_from_workspace("Glo")
        
        # trigger efficiency that at least one muon passes the trigger
        # effTrigger = (1 - (1-effHLT)**2 )
        # reconstructed number of Zs, do not perform fit but assume 1% background
        # recoZ = h_mass_yield_Z.Integral() * 0.99
        # delivered number of Zs given by efficiency corrected number of reconstructed Zs
        # delZ = recoZ / (effTrigger * effSIT**2 * effGlo**2)
        
        delZ = recoZ / effSIT**2

        log.info(f"Delivered number of Zs = {delZ}")

        # deadtime during the good lumisections
        deadtime = byLS_m['recorded(/pb)'].sum() / byLS_m['delivered(/pb)'].sum()
        
        # amount of seconds where we measured the Z counts (during good lumisections)
        timewindow = len(byLS_m)*secPerLS
        # convert time string to standard time_t format (which is a UInt_t) 
        beginTime = to_RootTime(byLS_m['time'][0], currentYear)
        endTime = to_RootTime(byLS_m['time'][-1], currentYear) + int(secPerLS)
        
        # total time window from the beginning of the first to the end of the last lumisection
        totaltimewindow = endTime - beginTime
        # convert standard time_t format back to time string
        beginTime = ROOT.TDatime(beginTime).AsSQLString().replace("-","/")[2:]
        endTime = ROOT.TDatime(endTime).AsSQLString().replace("-","/")[2:]
        
        result = {
            "fill": fill,
            "run": run,
            "measurement": m,
            "beginTime": beginTime,
            "endTime": endTime,
            "deadtime": deadtime,            
            "timewindow": timewindow,
            "totaltimewindow": totaltimewindow,
            "delLumi": byLS_m['delivered(/pb)'].sum(),
            "recLumi": byLS_m['recorded(/pb)'].sum(),
            "instDelLumi": byLS_m['delivered(/pb)'].sum() / timewindow,
            "instRecLumi": byLS_m['recorded(/pb)'].sum() / timewindow,
            "pileUp": byLS_m['avgpu'].mean(),
            "effHLT": effHLT,
            "effSel": effSIT,
            # "effGlo": effGlo,
            # delivered Z rate (corrected for deadtime and extrapolatet to the total time window)
            "delZCount": delZ / deadtime * (totaltimewindow / timewindow),    
            # instantaneous delivered Z rate (corrected for deadtime)
            "ZRate": delZ / (timewindow * deadtime)   
            
        }
        results.append(result)
        
        # # for testing exit after two measurements
        # if m >= 1:
        #     break

    # make one dataframe with information of the measurements
    df_results = pd.concat([pd.DataFrame([result]) for result in results], ignore_index=True, sort=False)

    if not os.path.isdir(dirOutCSV):
        os.mkdir(dirOutCSV)
        
    # write one single csv file for each run             
    with open(f'{dirOutCSV}/csvfile{run}.csv', 'w') as file:
        df_results.to_csv(file, index=False)

# write one large file containg full information of all measurements
writeSummaryCSV(dirOutCSV, outName=f"Mergedcsvfile_{etaCut}", writeByLS=False)

# write one large file containg CMS information of all measurements - to share with ATLAS
writeSummaryCSV(dirOutCSV, outName=f"cms_{etaCut}", writeByLS=False, 
    keys=["fill","beginTime","endTime","ZRate","instDelLumi","delLumi","delZCount"])

log.info(" ===Done")
