#!/usr/bin/env python
import os
import pandas as pd
import glob

import argparse
parser = argparse.ArgumentParser(prog='./submit_ZCounting')
parser.add_argument(
    '-i', '--inputDQM', type=str,
    help='specify directory to input histogram .root files'
)
parser.add_argument(
    '--mcCorrections', default='./Resources/MCCorrections.json', type=str,
    help='specify .json file with MC corrections for muon correlations'
)
parser.add_argument(
    '--sigTemplates', default='./Resources/MCTemplates', type=str,
    help='specify directory with MC template root tree files for signal shapes'
)
parser.add_argument(
    '--byLS', default=None, type=str,
    help='specify byLS.json to select specific lumi sections'
)
parser.add_argument(
    '--ptCut', type=float,
    help='specify lower pt cut on tag and probe muons'
)
parser.add_argument(
    '-o', '--output', default='./',
    help='specify output dir'
)
args = parser.parse_args()

dirDQM = args.inputDQM
dirOut = args.output
mcCorrections = args.mcCorrections
byLsCSV = args.byLS
sigTemplates = args.sigTemplates
ptCut = args.ptCut

print("create runlist from byLsCSV file")
with open(byLsCSV) as file:
    byLS_lines = file.readlines()
byLS_data = pd.read_csv(byLsCSV, sep=',', low_memory=False,
                   skiprows=lambda x: byLS_lines[x].startswith('#') and not byLS_lines[x].startswith('#run'))
runlist = byLS_data['#run:fill'].str.split(':', expand=True)[0].drop_duplicates().tolist()

runlist = runlist[:2]
print(runlist)


cmsswbase = os.environ['CMSSW_BASE']
if not cmsswbase:
    print("please set cmsenv")
    exit()

cs_file = open("cs_tmp.sub", "w")

cs_file.write("executable  = runZCountingOnBatch.sh \n")
cs_file.write("output      = condor/$(ClusterId).$(ProcId).out \n")
cs_file.write("error       = condor/$(ClusterId).$(ProcId).err \n")
cs_file.write("log         = condor/$(ClusterId).$(ProcId).log \n")
cs_file.write("+JobFlavour =\"workday\" \n")
for run in runlist:
    if len(glob.glob(dirDQM+"/000*/*{0}*.root".format(run))) == 0 :
        continue
    cs_file.write("arguments  = {0} {1} {2} {3} {4} {5} {6} {7}\n".format(
        run,
        cmsswbase,
        dirDQM,
        byLsCSV,
        dirOut,
        mcCorrections,
        sigTemplates,
        ptCut
	))

    cs_file.write("queue\n")
cs_file.close()

os.system("condor_submit cs_tmp.sub")

#os.system("rm cs_tmp.sub")
